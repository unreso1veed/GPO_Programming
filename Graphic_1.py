import subprocess
import os
import pandas as pd
import numpy as np
from pathlib import Path

def get_filename_from_user():
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("üìÅ –§–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
    script_dir = Path(__file__).parent.absolute()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
    data_files = []
    for ext in ['.txt', '.csv', '.dat']:
        data_files.extend(script_dir.glob(f"*{ext}"))
    
    if data_files:
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö:")
        for file in data_files:
            print(f"  üìÑ {file.name}")
    else:
        print("  ‚ùå –§–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    print("\n" + "="*50)
    filename = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: zapis_04_09.txt): ").strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    data_file = script_dir / filename
    if not data_file.exists():
        print(f"‚ùå –§–∞–π–ª '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return None
    
    return filename

def process_and_create_plot(filename):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–≥–ª–∞–∂–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
    –°–º–µ—â–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Ç–æ—á–µ–∫ –Ω–∞ 0.05 —Å–µ–∫—É–Ω–¥—ã
    """
    script_dir = Path(__file__).parent.absolute()
    data_file = script_dir / filename
    base_name = Path(filename).stem  # –ò–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    
    # –°–æ–∑–¥–∞–µ–º –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    output_file = script_dir / f"{base_name}_processed.png"
    processed_data_file = script_dir / f"{base_name}_processed.txt"
    smoothed_data_file = script_dir / f"{base_name}_smoothed.txt"
    
    print(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {filename}")
    print(f"üìÅ –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ:")
    print(f"  üìä {output_file.name}")
    print(f"  üìù {processed_data_file.name}")
    
    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        try:
            df = pd.read_csv(data_file, header=None, names=['Time', 'SensorValue'], sep=',')
        except:
            try:
                df = pd.read_csv(data_file, header=None, names=['Time', 'SensorValue'], sep=';')
            except:
                df = pd.read_csv(data_file, header=None, names=['Time', 'SensorValue'], sep='\s+')
        
        print(f"‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(df)} –∑–∞–ø–∏—Å–µ–π")
        print(f"üìà –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏: {df['Time'].nunique()}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É
        time_diff = np.diff(df['Time'])
        repeated_times = sum(time_diff == 0)
        print(f"üîç –ü–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫: {repeated_times}")
        
        if repeated_times > 0:
            print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ - –¥–æ–±–∞–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ 0.05 —Å–µ–∫—É–Ω–¥—ã...")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processed_df = df.copy()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ 0.05 —Å–µ–∫—É–Ω–¥—ã –∫ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º—Å—è —Ç–æ—á–∫–∞–º
            shift_amount = 0.05  # –ø—è—Ç—å —Å–æ—Ç—ã—Ö —Å–µ–∫—É–Ω–¥—ã
            
            for i in range(1, len(processed_df)):
                if processed_df.loc[i, 'Time'] <= processed_df.loc[i-1, 'Time']:
                    # –ù–∞—Ö–æ–¥–∏–º –±–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
                    base_time = processed_df.loc[i-1, 'Time']
                    
                    # –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø–æ–≤—Ç–æ—Ä—è–ª–æ—Å—å
                    repeat_count = 0
                    j = i - 1
                    while j >= 0 and processed_df.loc[j, 'Time'] == base_time:
                        repeat_count += 1
                        j -= 1
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ: 0.05, 0.10, 0.15 –∏ —Ç.–¥.
                    processed_df.loc[i, 'Time'] = base_time + (repeat_count * shift_amount)
            
            print(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–º–µ—â–µ–Ω–∏–µ: {shift_amount} —Å–µ–∫—É–Ω–¥—ã –∫ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º—Å—è —Ç–æ—á–∫–∞–º")
            
            # –£—Å—Ä–µ–¥–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–∫–æ–ª—å–∑—è—â–∏–º —Å—Ä–µ–¥–Ω–∏–º
            window_size = min(5, len(processed_df) // 10)
            if window_size < 3:
                window_size = 3
                
            processed_df['Smoothed'] = processed_df['SensorValue'].rolling(
                window=window_size, center=True, min_periods=1
            ).mean()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            processed_df[['Time', 'Smoothed']].to_csv(processed_data_file, index=False, header=False)
            print(f"üíæ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {processed_data_file.name}")
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            create_gnuplot_plot(processed_data_file, output_file, processed_df, shift_amount, base_name)
            
        else:
            print("‚úÖ –í—Ä–µ–º—è —É–Ω–∏–∫–∞–ª—å–Ω–æ, –ø—Ä–æ—Å—Ç–æ —Å–≥–ª–∞–∂–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
            # –ü—Ä–æ—Å—Ç–æ —Å–≥–ª–∞–∂–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            df['Smoothed'] = df['SensorValue'].rolling(
                window=5, center=True, min_periods=1
            ).mean()
            
            df[['Time', 'Smoothed']].to_csv(smoothed_data_file, index=False, header=False)
            print(f"üíæ –°–≥–ª–∞–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {smoothed_data_file.name}")
            
            create_gnuplot_plot(smoothed_data_file, output_file, df, 0, base_name)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return False

def create_gnuplot_plot(data_file, output_file, df, shift_amount, base_name):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —á–µ—Ä–µ–∑ gnuplot"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        time_range = f"[{df['Time'].min():.2f}:{df['Time'].max():.2f}]"
        value_range = f"[{df['SensorValue'].min() * 0.9:.2f}:{df['SensorValue'].max() * 1.1:.2f}]"
        
        title = f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {base_name}"
        if shift_amount > 0:
            title += f" (—Å–º–µ—â–µ–Ω–∏–µ: {shift_amount}s)"
        
        gnuplot_script = f"""
set terminal png enhanced size 1400,800
set output "{output_file}"
set title "{title}"
set xlabel "Time (s)"
set ylabel "SensorValue"
set grid xtics ytics
set key top left

# –î–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
set xrange {time_range}
set yrange {value_range}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω—ã—Ö
set datafile separator ","

# –†–∏—Å—É–µ–º —Å–≥–ª–∞–∂–µ–Ω–Ω—É—é –ª–∏–Ω–∏—é
plot "{data_file}" using 1:2 with lines lw 3 lc rgb "blue" title "–°–≥–ª–∞–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"

set print "-"
print "–ì—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω: {output_file}"
"""
        
        result = subprocess.run(
            ['gnuplot'],
            input=gnuplot_script,
            text=True,
            capture_output=True,
            timeout=30
        )
        
        if output_file.exists():
            print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω: {output_file.name}")
            print(f"üìä –ù–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏: {df['Time'].min():.2f} - {df['Time'].max():.2f} s")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ gnuplot: {e}")

def show_detailed_time_analysis(filename):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    script_dir = Path(__file__).parent.absolute()
    data_file = script_dir / filename
    
    try:
        df = pd.read_csv(data_file, header=None, names=['Time', 'SensorValue'])
        
        print("üìã –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –í–†–ï–ú–ï–ù–ò:")
        print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
        print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω: {df['Time'].nunique()}")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –≤—Ä–µ–º–µ–Ω–∞
        time_counts = df['Time'].value_counts()
        repeated_times = time_counts[time_counts > 1]
        
        if len(repeated_times) > 0:
            print(f"\nüîç –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏:")
            for time_val, count in repeated_times.head(5).items():
                print(f"  –í—Ä–µ–º—è {time_val:.2f}s –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è {count} —Ä–∞–∑")
            
            if len(repeated_times) > 5:
                print(f"  ... –∏ –µ—â–µ {len(repeated_times) - 5} –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –≤—Ä–µ–º–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

def cleanup_old_files(base_name):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã —Å —Ç–µ–º –∂–µ –±–∞–∑–æ–≤—ã–º –∏–º–µ–Ω–µ–º"""
    script_dir = Path(__file__).parent.absolute()
    
    files_to_remove = [
        f"{base_name}_processed.png",
        f"{base_name}_processed.txt", 
        f"{base_name}_smoothed.txt"
    ]
    
    print("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    for file_name in files_to_remove:
        file_path = script_dir / file_name
        if file_path.exists():
            try:
                file_path.unlink()
                print(f"  –£–¥–∞–ª–µ–Ω: {file_name}")
            except:
                pass

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("=" * 70)
    print("üéØ –ö–û–†–†–ï–ö–¶–ò–Ø –í–†–ï–ú–ï–ù–ò - –°–ú–ï–©–ï–ù–ò–ï –ù–ê 0.05 –°–ï–ö–£–ù–î–´")
    print("=" * 70)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data_filename = get_filename_from_user()
    if data_filename is None:
        exit()
    
    base_name = Path(data_filename).stem
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
    cleanup_old_files(base_name)
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    show_detailed_time_analysis(data_filename)
    
    print("\n" + "=" * 70)
    print(f"üõ†Ô∏è  –ù–ê–ß–ò–ù–ê–ï–ú –û–ë–†–ê–ë–û–¢–ö–£ –§–ê–ô–õ–ê: {data_filename}")
    print("=" * 70)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    process_and_create_plot(data_filename)
    
    print("\n" + "=" * 70)
    print("‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 70)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    script_dir = Path(__file__).parent.absolute()
    print("üìÅ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:")
    created_files = list(script_dir.glob(f"{base_name}_*"))
    
    if created_files:
        for file in created_files:
            if file.exists():
                size_kb = file.stat().st_size / 1024
                print(f"  üìä {file.name} ({size_kb:.1f} KB)")
    else:
        print("  ‚ùå –§–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã")
    
    print("\nüéØ –ì–æ—Ç–æ–≤–æ! –ú–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥—Ä—É–≥–¥–æ–π —Ñ–∞–π–ª, –∑–∞–ø—É—Å—Ç–∏–≤ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–Ω–æ–≤–∞.")